{
  "abstract" : [
    {
      "text" : "Perform concurrent work on the DocC model.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/SwiftDocC\/documentation\/SwiftDocC"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/SwiftDocC\/documentation\/SwiftDocC\/Concurrency"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "SwiftDocC"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Concurrency"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "DocC is, generally speaking, performing a sequence of operations on a set of documentation topics. Since the compilaton is a pipeline, you mostly do work serially as each stage’s input is the previous stage’s output.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When working serially becomes a bottleneck, use a suitable method from a small number of ",
              "type" : "text"
            },
            {
              "code" : "Collection",
              "type" : "codeVoice"
            },
            {
              "text" : " extensions that synchronously perform concurrent work on multiple threads but keep the complexity of your code manageable.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The preferred way to concurrently perform work is to have a function called from within the main queue, perform concurrent operations inside the function, and return the aggregated results, keeping the concurrency within the local scope of the function.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you would like to concurrently perform work on a collection of inputs you have a choice between:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Collection.concurrentPerform(batches:block:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " concurrently perform a block of code over the collection elements. A concurrent alternative to ",
                      "type" : "text"
                    },
                    {
                      "code" : "Collection.forEach(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Collection.concurrentPerform(batches:block:) -> [Result]",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " concurrently perform a block over the collection elements and optionally return an arbitrary amount of results returned in no particular order.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Collection.concurrentMap(batches:block:) -> [Result]",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " concurrently convert the collection elements; the returned results are in the collection’s original order. A concurrent alternative to ",
                      "type" : "text"
                    },
                    {
                      "code" : "Collection.map(_:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "To concurrently convert a set of elements and preserve the order in the results use:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let results: [Int] = [1, 2, 3, 4].concurrentMap {",
            "  return $0 * 2",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To return an arbitrary amount of results in no particular order use:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let errors: [Error] = [1, 2, 3, 4].concurrentPerform { element, results in",
            "  if element % 2 == 0 {",
            "    results.append(MyError.evenInput)",
            "  }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/SwiftDocC\/documentation\/SwiftDocC\/Utilities",
        "doc:\/\/SwiftDocC\/documentation\/SwiftDocC\/Communication"
      ],
      "title" : "Utilities and Communication"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/swiftdocc\/concurrency"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://SwiftDocC/documentation/SwiftDocC": {
  "abstract" : [
    {
      "text" : "Combine code comments with markup prose to produce structured, semantic documentation.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftDocC\/documentation\/SwiftDocC",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "SwiftDocC",
  "type" : "topic",
  "url" : "\/documentation\/swiftdocc"
},
"doc://SwiftDocC/documentation/SwiftDocC/Communication": {
  "abstract" : [
    {
      "text" : "Offer native integration of DocC in your IDE.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftDocC\/documentation\/SwiftDocC\/Communication",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Communication Bridge",
  "type" : "topic",
  "url" : "\/documentation\/swiftdocc\/communication"
},
"doc://SwiftDocC/documentation/SwiftDocC/Utilities": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/SwiftDocC\/documentation\/SwiftDocC\/Utilities",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Utility APIs",
  "type" : "topic",
  "url" : "\/documentation\/swiftdocc\/utilities"
}
}
}